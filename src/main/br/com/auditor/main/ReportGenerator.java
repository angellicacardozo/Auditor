package br.com.auditor.main;

import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import br.com.auditor.domain.ARTicket;
import br.com.auditor.domain.EQuee;
import br.com.auditor.domain.EStates;
import br.com.auditor.domain.Ticket;
import br.com.auditor.extractor.ExcelDataExtractor;
import br.com.auditor.policies.ETicketAgeGroupPolicies;

public class ReportGenerator {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		List<Ticket> tickets= ExcelDataExtractor.extractTicketListFromCSVData("WebContent/report.csv");
		System.out.println("Total de tickets extraidos: "+tickets.size()+"\n");
		
		List<Ticket> ticketdSixtyOrMoreOlder= new ArrayList<Ticket>();
		for (Ticket ticket : tickets) {
			if(ticket.getAge()==ETicketAgeGroupPolicies.SIXTYOROLDER) {
				ticketdSixtyOrMoreOlder.add(ticket);
			}
		}
		
		List<Ticket> ticketdTenDaysOrLess= new ArrayList<Ticket>();
		for (Ticket ticket : tickets) {
			if(ticket.getAge()==ETicketAgeGroupPolicies.LESSTHANOREQUALTENDAYS) {
				ticketdTenDaysOrLess.add(ticket);
			}
		}
		
		List<Ticket> ticketsBetweenElevenOrThirtyDays= new ArrayList<Ticket>();
		for (Ticket ticket : tickets) {
			if(ticket.getAge()==ETicketAgeGroupPolicies.BETWEENELEVENANDTHIRTY) {
				ticketsBetweenElevenOrThirtyDays.add(ticket);
			}
		}
		
		List<Ticket> ticketsBetweenThirtyOrSixtyDays= new ArrayList<Ticket>();
		for (Ticket ticket : tickets) {
			if(ticket.getAge()==ETicketAgeGroupPolicies.BETWEENTHIRTYORSIXTYDAYS) {
				ticketsBetweenThirtyOrSixtyDays.add(ticket);
			}
		}
		
		// Now we need to group by quee
		// We still dont know our quees, so lets identify in primitive way
		
		// We eill need a date formatter
		DateTimeFormatter parser = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		DateTime jodaTime;
		
		String[] quee= {EQuee.TRIAGEM};
		int totalTickets= 0;
		for (int i = 0; i < quee.length; i++) {
			
			System.out.println(quee[i]);
			System.out.println("\n");
			
			System.out.println("----- TICKETS COM 10 DIAS OU MENOS: ");
			for(Ticket ticket : ticketdTenDaysOrLess) {
				if(quee[i].compareTo(ticket.getCurrentState().getQuee())==0){
					jodaTime = new DateTime(ticket.getOpenDate().getTimeInMillis(),DateTimeZone.forTimeZone(TimeZone.getTimeZone("US/Central")));
					System.out.println(ticket.toString());
					
					totalTickets++;
				}
			}
			System.out.println("TOTAL: "+totalTickets+" \n\n");
			totalTickets= 0;
			
			System.out.println("----- TICKETS ENTRE 11 E 30 DIAS: ");
			for(Ticket ticket : ticketsBetweenElevenOrThirtyDays) {
				if(quee[i].compareTo(ticket.getCurrentState().getQuee())==0){
					System.out.println(ticket.toString());
					totalTickets++;
				}
			}
			System.out.println("TOTAL: "+totalTickets+" \n\n");
			totalTickets= 0;
			
			System.out.println("----- TICKETS ENTRE 30 E 60 DIAS: ");
			for(Ticket ticket : ticketsBetweenThirtyOrSixtyDays) {
				if(quee[i].compareTo(ticket.getCurrentState().getQuee())==0){
					System.out.println(ticket.toString());
					totalTickets++;
				}
			}
			System.out.println("TOTAL: "+totalTickets+" \n\n");
			totalTickets= 0;
			
			System.out.println("----- TICKETS COM 60 DIAS OU MAIS: ");
			for(Ticket ticket : ticketdSixtyOrMoreOlder) {
				if(quee[i].compareTo(ticket.getCurrentState().getQuee())==0){
					System.out.println(ticket.toString());
					totalTickets++;
				}
			}
			System.out.println("TOTAL: "+totalTickets+" \n\n\n");
			totalTickets= 0;
		}
		System.out.println("-----------------------------------------------------------");
		System.out.println("Generated by OTRS Auditor\n\n\n\n\n\n\n");
	}

}
